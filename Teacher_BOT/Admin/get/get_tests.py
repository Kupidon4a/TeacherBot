from telegram import Update
from telegram.ext import ContextTypes
from Data_Base.database import db
from Admin.send_large_message import send_large_message

#–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
async def get_tests(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        requester = update.effective_user.username
        if not db.is_admin(requester):
            await update.effective_message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            return

        tests = db.get_tests()

        if not tests:
            await update.effective_message.reply_text("‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Ç–µ—Å—Ç–æ–≤.")
            return

        message = "üìã –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤:\n\n"

        for i, test in enumerate(tests, 1):
            if 'discipline' not in test or 'course' not in test or 'topic' not in test or 'title' not in test or 'questions' not in test:
                message += f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {i}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ.\n"
                print(f"–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {i}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ.")
                continue

            message += (
                f"{i}. üìò –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {test['discipline']}\n"
                f"   üìó –ö—É—Ä—Å: {test['course']}\n"
                f"   üìô –¢–µ–º–∞: {test['topic']}\n"
                f"   üìì –£—Ä–æ–∫: {test['title']}\n"
            )

            #–ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –≤ —Ç–µ—Å—Ç–µ
            for j, question in enumerate(test["questions"], 1):

                if "type" not in question or "text" not in question:
                    message += f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –≤–æ–ø—Ä–æ—Å–µ {j} —Ç–µ—Å—Ç–∞ {i}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–∏–ø –∏–ª–∏ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞.\n"
                    continue

                message += f"   ‚ùì –í–æ–ø—Ä–æ—Å {j}: {question['text']}\n"
                message += f"   üß™ –¢–∏–ø: {question['type']}\n"

                if question["type"] == "multiple_choice":
                    if "options" not in question or "correct_answer" not in question:
                        message += f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –≤–æ–ø—Ä–æ—Å–µ {j} —Ç–µ—Å—Ç–∞ {i}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç.\n"
                        continue
                    options = "\n".join([f"      {idx+1}. {opt}" for idx, opt in enumerate(question["options"])])
                    message += f"     –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞:\n{options}\n"
                    correct_answer = question["correct_answer"]
                    message += f"   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: {question['options'][int(correct_answer)-1]}\n"

                elif question["type"] == "text_answer":
                    if "correct_answer" not in question:
                        message += f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –≤–æ–ø—Ä–æ—Å–µ {j} —Ç–µ—Å—Ç–∞ {i}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç.\n"
                        continue
                    message += f"   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question['correct_answer']}\n"

                
            message += "\n\n"
        message += "\n\n"
        await send_large_message(update, message)

    except Exception as e:
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤: {str(e)}")
        print(f"–û—à–∏–±–∫–∞: {str(e)}")