from telegram import Update
from telegram.ext import ContextTypes

from Handlers.handler_text_answer import handle_text_answer
from Admin.save_test_to_db import save_test_to_db
from Admin.handler_add_lesson import handler_add_lesson

async def handle_text_answers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('waiting_for_text_answer'):
        await handle_text_answer(update, context)
        return

    elif context.user_data.get("add_lesson_text"):
        await handler_add_lesson(update, context)
        return
    
    elif context.user_data.get("add_lesson_test"):
        test_data = context.user_data["add_test"]
        stage = test_data["stage"]
        
        msg = update.message.text.strip()
        if stage == "ask_question_text":
            test_data["question"]["text"] = msg
            test_data["stage"] = "ask_question_type"
            await update.message.reply_text("‚ùì –ö–∞–∫–æ–π —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞? –í–≤–µ–¥–∏—Ç–µ `multiple_choice` –∏–ª–∏ `text_answer`:")
            return

        elif stage == "ask_question_type":
            if msg not in ("multiple_choice", "text_answer"):
                await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ `multiple_choice` –∏–ª–∏ `text_answer`.")
                return
            test_data["question"]["type"] = msg
            if msg == "multiple_choice":
                test_data["question"]["options"] = []
                test_data["stage"] = "collect_options"
                await update.message.reply_text("‚úÖ –í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ (–≤–≤–µ–¥–∏—Ç–µ `stop` –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ):")
            else:
                test_data["stage"] = "ask_correct_text"
                await update.message.reply_text("‚úÖ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:")
            return

        elif stage == "collect_options":
            if msg.lower() == "stop":
                if len(test_data["question"]["options"]) < 2:
                    await update.message.reply_text("‚ö†Ô∏è –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞.")
                    return
                test_data["stage"] = "ask_correct_option"
                options = "\n".join(f"{i+1}. {opt}" for i, opt in enumerate(test_data["question"]["options"]))
                await update.message.reply_text(f"üü© –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞:\n{options}")
                return
            test_data["question"]["options"].append(msg)
            await update.message.reply_text("‚ûï –î–æ–±–∞–≤–ª–µ–Ω. –í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∏–ª–∏ `stop` –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:")
            return

        elif stage == "ask_correct_option":
            try:
                idx = int(msg) - 1
                if idx < 0 or idx >= len(test_data["question"]["options"]):
                    raise ValueError
                test_data["question"]["correct"] = idx
            except ValueError:
                await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞.")
                return

            await save_test_to_db(update, context)
            context.user_data["add_lesson_test"] = False
            await update.message.reply_text("‚úÖ –í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ? –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /add_test –∑–∞–Ω–æ–≤–æ!")
            context.user_data["add_test"]["question"] = {}
            context.user_data["add_test"]["stage"] = "ask_question_text"
            return

        elif stage == "ask_correct_text":
            test_data["question"]["correct"] = msg
            await save_test_to_db(update, context)
            context.user_data["add_lesson_test"] = False
            await update.message.reply_text("‚úÖ –í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ? –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /add_test –∑–∞–Ω–æ–≤–æ!")
            context.user_data["add_test"]["question"] = {}
            context.user_data["add_test"]["stage"] = "ask_question_text"
            return

        return

    else:
        await update.message.reply_text("‚ö†Ô∏è –°–µ–π—á–∞—Å –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.")
        return