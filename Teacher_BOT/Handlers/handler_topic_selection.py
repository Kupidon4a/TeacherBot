from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from Data_Base.database import db
from Courses.show_courses import show_courses

from User.user import user

async def handle_topic_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "back_to_courses":
        try:
            await show_courses(update, context)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –∫—É—Ä—Å–∞–º: {str(e)}")
            await query.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫—É—Ä—Å–æ–≤")
        return
    
    if user.get_course() == None or user.get_topic() != None or user.get_title() != None:
        print(user.get_course())
        print(user.get_topic())
        print(user.get_title())
        
        await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–µ –Ω–∞–∂–∏–º–∞–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–µ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç –±–æ—Ç–∞!")
        return

    try:
        topic_id = query.data.replace("topic_", "")
        topic_name = context.user_data.get(f"topic_{topic_id}")
        
        if not topic_name:
            await query.message.reply_text("‚ùå –¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        user.set_topic(topic_name)
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å –ª–æ–≥–∏–Ω–æ–º {user.get_login()} –≤—ã–±—Ä–∞–Ω–∞ —Ç–µ–º–∞ {user.get_topic()}")
        lessons = db.get_lessons(user.discipline, user.course, user.topic)
        
        if not lessons:
            await query.message.reply_text(f"‚ùå –í —Ç–µ–º–µ '{user.get_topic()}' –∏–∑ –∫—É—Ä—Å–∞ {user.get_course()} –∏–∑ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã {user.get_discipline()} –Ω–µ—Ç —É—Ä–æ–∫–æ–≤")
            return
        
        buttons = []
        for lesson in lessons:
            lesson_id = str(abs(hash(lesson)))[:8]
            buttons.append([InlineKeyboardButton(lesson, callback_data=f"lesson_{lesson_id}")])
            context.user_data[f"lesson_{lesson_id}"] = lesson
        
        buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_topics")])
        
        await query.message.reply_text(
            f"üìù –¢–µ–º–∞: <b>{topic_name}</b>\n–í—ã–±–µ—Ä–∏ —É—Ä–æ–∫:",
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode="HTML"
        )
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_topic_selection: {str(e)}")
        await query.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—Ä–æ–∫–æ–≤")