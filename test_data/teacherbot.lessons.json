[{
  "_id": {
    "$oid": "6819ba37a750af789de3e923"
  },
  "discipline": "DevOPS",
  "course": "С Linux администратора до DevOPS",
  "topic": "Введение в DevOPS",
  "title": "Урок 1: Что такое DevOPS и основные принципы",
  "lesson": "DevOPS — это методология, направленная на улучшение взаимодействия между разработчиками и операционными командами.\n\nОсновные цели DevOPS:\nУскорение разработки и выпуска продуктов;\nПовышение качества и стабильности приложений;\nАвтоматизация процессов.\n\nОсновные принципы DevOPS:\nКультура сотрудничества — между разработкой и операционными командами;\nАвтоматизация процессов — CI/CD, тестирование, деплой;\nНепрерывное улучшение — постоянное улучшение процессов и обратная связь.\n\nЗадачи DevOPS:\nАвтоматизация сборки, тестирования, деплоя;\nУправление инфраструктурой как код (Infrastructure as Code);\nМониторинг и логирование."
},
{
  "_id": {
    "$oid": "6819bd2da750af789de3e925"
  },
  "discipline": "DevOPS",
  "course": "С Linux администратора до DevOPS",
  "topic": "Введение в DevOPS",
  "title": "Урок 2: Инструменты DevOPS",
  "lesson": "DevOPS использует различные инструменты для автоматизации, управления и мониторинга. Некоторые из них:\nCI/CD: Jenkins, GitLab CI, CircleCI.\nКонтейнеризация: Docker, Kubernetes.\n\nУправление конфигурациями: Ansible, Puppet, Chef.\nУправление инфраструктурой: Terraform, Packer.\nМониторинг и логирование: Prometheus, Grafana, ELK Stack."
},
{
  "_id": {
    "$oid": "6819c183a750af789de3e927"
  },
  "discipline": "DevOPS",
  "course": "С Linux администратора до DevOPS",
  "topic": "Модель управления инфраструтурой Packer, Terraform",
  "title": "Урок 1: Введение в Packer и создание образов",
  "lesson": "Packer — это инструмент для автоматизации создания виртуальных машин, контейнеров и других образов. Он позволяет создать несколько образов из единого исходного кода.\n\nОсновные концепции:\nКонфигурация шаблона: описание, как создать образ;\nПровайдеры: поддерживаемые платформы, такие как AWS, VirtualBox, VMware;\nПост-обработчики: действия после создания образа.\n\nОсновные команды:\npacker init — инициализация рабочей среды;\npacker validate — проверка конфигурации;\npacker build — создание образа."
},
{
  "_id": {
    "$oid": "6819c2c4a750af789de3e929"
  },
  "discipline": "DevOPS",
  "course": "С Linux администратора до DevOPS",
  "topic": "Модель управления инфраструтурой Packer, Terraform",
  "title": "Урок 2: Введение в Terraform и управление инфраструктурой как код",
  "lesson": "Terraform — это инструмент для управления инфраструктурой как код (IaC). Он позволяет описывать инфраструктуру в виде кода и управлять ею через версии, что упрощает автоматизацию и воспроизводимость.\n\nОсновные понятия:\nРесурсы — элементы инфраструктуры, такие как серверы, сети, базы данных;\nМодули — повторно используемые блоки кода;\nСостояние (State) — хранение информации о текущем состоянии инфраструктуры.\n\nОсновные команды:\nterraform init — инициализация проекта;\nterraform plan — планирование изменений;\nterraform apply — применение изменений;\nterraform destroy — уничтожение инфраструктуры."
},
{
  "_id": {
    "$oid": "6819c6605a33138151d036a3"
  },
  "discipline": "DevOPS",
  "course": "С Linux администратора до DevOPS",
  "topic": "Управление конфигурацией Ansible",
  "title": "Урок 1: Введение в Ansible и его архитектура",
  "lesson": "Ansible — это инструмент для автоматизации управления конфигурациями. Ansible использует концепцию Push-модели, когда изменения настраиваются на удаленных машинах.\n\nОсновные компоненты:\nPlaybook — сценарии, которые описывают, как управлять системами;\nInventory — файл, содержащий список управляемых узлов;\nModule — функции, которые выполняются на удаленных системах.\n\nКоманды:\nansible all -m ping — проверка доступности всех узлов;\nansible-playbook playbook.yml — выполнение playbook;\nansible -i hosts all -m yum -a \"name=httpd state=installed\" — установка пакета через Ansible."
},
{
  "_id": {
    "$oid": "6819c79d5a33138151d036a5"
  },
  "discipline": "DevOPS",
  "course": "С Linux администратора до DevOPS",
  "topic": "Управление конфигурацией Ansible",
  "title": "Урок 2: Пример Playbook и использование переменных",
  "lesson": "Playbook в Ansible — это последовательность задач, которые описывают, как настроить систему. Также можно использовать переменные для динамической настройки.\n\nПример playbook:\nyaml\nКопироватьРедактировать\n- hosts: all\n  become: yes\n  tasks:\n    - name: Установить nginx\n      yum:\n        name: nginx\n        state: present\n    - name: Запустить nginx\n      service:\n        name: nginx\n        state: started\n\nПеременные могут быть:\nЛокальные, определенные в playbook;\nГлобальные, определенные в инвентаре или в отдельном файле."
},
{
  "_id": {
    "$oid": "6819db5c5a33138151d036a7"
  },
  "discipline": "DevOPS",
  "course": "С Linux администратора до DevOPS",
  "topic": "Работа с Docker",
  "title": "Урок 1: Введение в Docker и создание контейнеров",
  "lesson": "Docker — это платформа для контейнеризации приложений. Контейнеры изолируют приложение и его зависимости от основной операционной системы.\n\nОсновные команды:\ndocker run hello-world — проверить, установлен ли Docker;\ndocker build -t myapp . — сборка контейнера из Dockerfile;\ndocker run -d -p 8080:80 myapp — запуск контейнера в фоновом режиме;\ndocker ps — показать запущенные контейнеры;\ndocker stop <container_id> — остановить контейнер."
},
{
  "_id": {
    "$oid": "6819dbe75a33138151d036a9"
  },
  "discipline": "DevOPS",
  "course": "С Linux администратора до DevOPS",
  "topic": "Работа с Docker",
  "title": "Урок 2: Работа с Docker Compose",
  "lesson": "Docker Compose — это инструмент для определения и запуска многоконтейнерных Docker приложений. Он использует файл docker-compose.yml для конфигурации.\n\nПример файла docker-compose.yml:\nyaml\nКопироватьРедактировать\nversion: '3'\nservices:\n  web:\n    image: nginx\n    ports:\n      - \"8080:80\"\n  db:\n    image: postgres\n    environment:\n      POSTGRES_PASSWORD: example\n\nОсновные команды:\ndocker-compose up — запускает все контейнеры из docker-compose.yml;\ndocker-compose down — останавливает и удаляет контейнеры."
},
{
  "_id": {
    "$oid": "681a367dd6684927d8fa77bf"
  },
  "discipline": "DevOPS",
  "course": "С Linux администратора до DevOPS",
  "topic": "Jenkins",
  "title": "Урок 1: Введение в Jenkins и настройка первого проекта",
  "lesson": "Jenkins — это инструмент для автоматизации различных задач, таких как сборка, тестирование и деплой приложений. Он широко используется для реализации процессов CI/CD (Continuous Integration/Continuous Deployment).\n\nОсновные компоненты Jenkins:\nJenkins Pipeline — сценарии для автоматизации рабочих процессов;\nJenkins Jobs — задачи, которые Jenkins выполняет, например, сборка кода;\nJenkins Master — главный сервер Jenkins;\nJenkins Agents — дополнительные серверы для выполнения задач.\n\nПроцесс создания первого проекта:\n1.  Установите Jenkins на сервере.\n2.  Создайте новый проект (Job).\n3.  Настройте сборку проекта с помощью инструмента Git.\n4.  Настройте выполнение тестов и деплой."
},
{
  "_id": {
    "$oid": "681a3846d6684927d8fa77c2"
  },
  "discipline": "DevOPS",
  "course": "С Linux администратора до DevOPS",
  "topic": "Jenkins",
  "title": "Урок 2: Создание Jenkins Pipeline для CI/CD",
  "lesson": "Jenkins Pipeline позволяет создавать автоматизированные процессы для CI/CD. Существует два типа Pipeline:\nDeclarative Pipeline — декларативный синтаксис для описания пайплайна;\nScripted Pipeline — более гибкий и расширяемый скриптовый синтаксис.\nПример простого декларативного Pipeline:\ngroovy\n\npipeline {\n    agent any\n    stages {\n        stage('Build') {\n            steps {\n                script {\n                    sh 'mvn clean install'\n                }\n            }\n        }\n        stage('Test') {\n            steps {\n                script {\n                    sh 'mvn test'\n                }\n            }\n        }\n        stage('Deploy') {\n            steps {\n                script {\n                    sh 'scp target/myapp.war user@server:/path/to/deploy'\n                }\n            }\n        }\n    }\n}\n\nВажные этапы:\nBuild — сборка приложения;\nTest — выполнение тестов;\nDeploy — деплой приложения."
},
{
  "_id": {
    "$oid": "681a39a1d6684927d8fa77c4"
  },
  "discipline": "DevOPS",
  "course": "С Linux администратора до DevOPS",
  "topic": "Kubernetes",
  "title": "Урок 1: Введение в Kubernetes и его архитектура",
  "lesson": "Kubernetes — это система для оркестрации контейнеров, предназначенная для автоматизации развертывания, масштабирования и управления контейнеризованными приложениями.\n\nОсновные компоненты Kubernetes:\nPod — минимальная единица развертывания, содержащая контейнеры;\nNode — физический или виртуальный сервер, на котором запускаются Pods;\nCluster — набор Node, управляющийся Kubernetes;\n\nControl Plane — управляющая плоскость, которая принимает решения о состоянии кластера (например, Kubernetes API Server);\nKubernetes Services — абстракция, которая позволяет доступ к контейнерам.\n\nKubernetes использует файлы манифестов YAML для описания развертываемых объектов, таких как Pods, Deployments, Services."
},
{
  "_id": {
    "$oid": "681a3a8ad6684927d8fa77c6"
  },
  "discipline": "DevOPS",
  "course": "С Linux администратора до DevOPS",
  "topic": "Kubernetes",
  "title": "Урок 2: Управление приложениями в Kubernetes",
  "lesson": "Kubernetes позволяет управлять приложениями с помощью объектов, таких как:\n\nDeployment — описывает развертывание приложения и его обновления;\nService — создает стабильный доступ к подам;\nIngress — управляет внешним доступом к приложениям в кластере.\n\nОсновные команды Kubernetes:\nkubectl get pods — список всех подов;\nkubectl create -f deployment.yml — создание объекта из манифеста;\nkubectl apply -f deployment.yml — применение изменений;\nkubectl delete -f deployment.yml — удаление объекта.\n\nПример Deployment манифеста:\nyaml\nКопироватьРедактировать\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: myapp\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: myapp\n  template:\n    metadata:\n      labels:\n        app: myapp\n    spec:\n      containers:\n        - name: myapp\n          image: myapp:latest\n          ports:\n            - containerPort: 8080"
},
{
  "_id": {
    "$oid": "681a4544d6684927d8fa77c8"
  },
  "discipline": "DevOPS",
  "course": "С Linux администратора до DevOPS",
  "topic": "Мониторинг (Prometheus & Grafana)",
  "title": "Урок 1: Введение в мониторинг с Prometheus",
  "lesson": "Prometheus — это система мониторинга и сбора метрик, которая широко используется для сбора и хранения временных рядов данных. Prometheus предоставляет язык запросов PromQL для выборки и анализа данных.\n\nОсновные компоненты:\nPrometheus Server — основной компонент для сбора и хранения метрик;\nExporter — инструмент, собирающий метрики с приложений и сервисов;\nAlertmanager — система уведомлений и оповещений.\n\nОсновные шаги для настройки:\nУстановите Prometheus.\nНастройте targets для сбора метрик.\nНастройте Alertmanager для уведомлений."
},
{
  "_id": {
    "$oid": "681a4629d6684927d8fa77ca"
  },
  "discipline": "DevOPS",
  "course": "С Linux администратора до DevOPS",
  "topic": "Мониторинг (Prometheus & Grafana)",
  "title": "Урок 2: Визуализация данных с Grafana",
  "lesson": "Grafana — это инструмент для визуализации данных, который может интегрироваться с Prometheus и другими источниками данных. Он позволяет создавать дашборды с графиками, метками и алертами.\n\nОсновные шаги:\nУстановите Grafana.\nНастройте источник данных Prometheus.\nСоздайте дашборд и добавьте панели с графиками.\n\nПример панели:\nТип панели: Graph\nИсточник данных: Prometheus\nЗапрос: rate(http_requests_total[5m])"
},
{
  "_id": {
    "$oid": "681a4935d6684927d8fa77cc"
  },
  "discipline": "DevOPS",
  "course": "С Linux администратора до DevOPS",
  "topic": "ELK & GRAY LOG",
  "title": "Урок 1: Введение в ELK Stack",
  "lesson": "ELK Stack (Elasticsearch, Logstash, Kibana) — это набор инструментов для сбора, анализа и визуализации логов.\n\nКомпоненты:\nElasticsearch — поисковая и аналитическая система для хранения и обработки логов;\nLogstash — инструмент для сбора и обработки логов;\nKibana — интерфейс для визуализации и анализа данных из Elasticsearch.\n\nПроцесс работы ELK Stack:\nLogstash получает логи и отправляет их в Elasticsearch.\nElasticsearch хранит и индексирует логи.\nKibana предоставляет интерфейс для поиска и визуализации данных."
},
{
  "_id": {
    "$oid": "681a4a22d6684927d8fa77ce"
  },
  "discipline": "DevOPS",
  "course": "С Linux администратора до DevOPS",
  "topic": "ELK & GRAY LOG",
  "title": "Урок 2: Настройка ELK Stack для логирования",
  "lesson": "Настройка ELK Stack включает установку всех трех компонентов и их настройку для сбора и анализа логов.\n\nУстановите Elasticsearch, Logstash и Kibana.\n\nНастройте Logstash для сбора логов, например, из файлов или системных журналов.\n\nНастройте Kibana для визуализации данных, создавая дашборды для логов.\n\nПример конфигурации Logstash для получения логов из файлов:\n\nbash\n\ninput {\n  file {\n    path => \"/var/log/syslog\"\n    start_position => \"beginning\"\n  }\n}\noutput {\n  elasticsearch {\n    hosts => [\"http://localhost:9200\"]\n  }\n}"
},
{
  "_id": {
    "$oid": "681a56f6d6684927d8fa77dc"
  },
  "discipline": "DevOPS",
  "course": "Bash",
  "topic": "Основы Bash и работа с терминалом",
  "title": "Урок 1: Что такое Bash и зачем он нужен",
  "lesson": "Bash (Bourne Again SHell) — это одна из самых популярных оболочек командной строки в операционных системах на базе Linux. Это средство взаимодействия пользователя с операционной системой. Через Bash можно управлять файлами, запускать программы, автоматизировать задачи и создавать скрипты.\n\nОсновные преимущества Bash:\n•  Простота в изучении;\n•  Поддержка сценариев (scripts);\n•  Возможность автоматизации повседневных задач;\n•  Универсальность: доступен во всех дистрибутивах Linux и macOS.\n\nПримеры задач, которые удобно автоматизировать с помощью Bash:\n•  Очистка логов;\n•  Архивирование и резервное копирование данных;\n•  Массовое переименование или перемещение файлов;\n•  Мониторинг работы служб."
},
{
  "_id": {
    "$oid": "681a57cbd6684927d8fa77de"
  },
  "discipline": "DevOPS",
  "course": "Bash",
  "topic": "Основы Bash и работа с терминалом",
  "title": "Урок 2: Основные команды и синтаксис Bash",
  "lesson": "Работа в Bash основана на использовании команд. Каждая команда состоит из:\n•  имени команды;\n•  параметров;\n•  аргументов.\n\nПримеры базовых команд:\n•  pwd — показать текущий каталог;\n•  ls — список файлов и папок;\n•  cd — переход в другую директорию;\n•  mkdir — создать папку;\n•  rm — удалить файл или папку;\n•  man — открыть справку по команде.\n\nСинтаксис Bash:\n•  Команды пишутся в одну строку;\n•  Можно объединять команды с помощью ; или &&;\n•  Комментарии начинаются с символа #.\n\nПример:\nbash\nКопироватьРедактировать\ncd /home/user && ls -l\nЭта строка сначала перейдёт в каталог /home/user, а если это успешно — выведет список файлов."
},
{
  "_id": {
    "$oid": "681a5ba1d6684927d8fa77e1"
  },
  "discipline": "DevOPS",
  "course": "Bash",
  "topic": "Переменные и операторы",
  "title": "Урок 1: Переменные и типы данных",
  "lesson": "Переменные в Bash позволяют хранить значения для последующего использования. Переменные не имеют строгой типизации, то есть Bash рассматривает все как строки (по умолчанию).\n\nСоздание переменной:\nbash\nКопироватьРедактировать\nNAME=\"Ivan\"\nAGE=25\nПробелы вокруг = запрещены!\n\nДоступ к значению переменной:\nbash\nКопироватьРедактировать\necho $NAME\n\nТипы значений:\n•  строки (например, \"hello\");\n•  числа (используются в арифметике);\n•  списки (через массивы).\n\nСпециальные переменные:\n•  $0 — имя скрипта;\n•  $1, $2 ... — позиционные аргументы;\n•  $# — количество аргументов;\n•  $? — код завершения предыдущей команды."
},
{
  "_id": {
    "$oid": "681a5d18d6684927d8fa77e3"
  },
  "discipline": "DevOPS",
  "course": "Bash",
  "topic": "Переменные и операторы",
  "title": "Урок 2: Арифметические и логические операторы",
  "lesson": "Bash поддерживает простые арифметические операции:\necho $((5 + 3))      # 8\n\nАрифметические операторы:\n•  + — сложение\n•  - — вычитание\n•  * — умножение\n•  / — деление\n•  % — остаток от деления\n\nПример:\na=10\nb=3\nsum=$((a + b))\necho $sum\n\nЛогические операторы часто используются в условных конструкциях:\n•  -eq — равно\n•  -ne — не равно\n•  -lt, -le — меньше / меньше или равно\n•  -gt, -ge — больше / больше или равно\n\nПример:\nif [ \"$a\" -gt \"$b\" ]; then\n  echo \"$a больше $b\"\nfi"
},
{
  "_id": {
    "$oid": "681a60a6d6684927d8fa77e6"
  },
  "discipline": "DevOPS",
  "course": "Bash",
  "topic": "Управляющие конструкции",
  "title": "Урок 1: Условия: if, else, elif",
  "lesson": "Условные конструкции позволяют выполнять различные действия в зависимости от условий. Основной блок:\nif [ условие ]; then\n  команды\nelif [ другое_условие ]; then\n  другие_команды\nelse\n\n  альтернативные_команды\nfi\n\nПримеры условий:\nif [ \"$AGE\" -ge 18 ]; then\n  echo \"Доступ разрешен\"\nelse\n  echo \"Доступ запрещен\"\nfi\n\nОбратите внимание:\n•  Квадратные скобки [ ] обязательны (или можно использовать [[ ]]);\n•  Не забывайте ставить then после if;\n•  Блок завершается fi.\n\nЧасто используемые проверки:\n•  -z \"$VAR\" — переменная пуста;\n•  -n \"$VAR\" — переменная не пуста;\n•  -f file.txt — файл существует;\n•  -d папка — каталог существует."
},
{
  "_id": {
    "$oid": "681a63bcd6684927d8fa77e8"
  },
  "discipline": "DevOPS",
  "course": "Bash",
  "topic": "Управляющие конструкции",
  "title": "Урок 2: Циклы: for, while, until",
  "lesson": "Циклы позволяют повторять действия. В Bash есть три типа циклов: for, while, until.\n\nЦикл for:\nfor i in 1 2 3; do\n  echo \"Число: $i\"\ndone\n\nЦикл while:\ni=1\nwhile [ $i -le 3 ]; do\n  echo $i\n  ((i++))\ndone\n\nЦикл until (обратный while):\ni=1\nuntil [ $i -gt 3 ]; do\n  echo $i\n  ((i++))\ndone\n\nЦикл for часто применяется при работе с файлами:\nfor file in *.txt; do\n  echo \"Обрабатываю $file\"\ndone"
},
{
  "_id": {
    "$oid": "681a66a2d6684927d8fa77eb"
  },
  "discipline": "DevOPS",
  "course": "Bash",
  "topic": "Функции и скрипты",
  "title": "Урок 1: Создание Bash-скриптов",
  "lesson": "Скрипт — это файл, содержащий последовательность команд Bash. Такой файл можно запускать как программу.\n\nШаги создания скрипта:\n1.  Создайте файл:\nnano my_script.sh\n\n2.  В начале файла укажите шебанг:\n#!/bin/bash\n\n3.  Напишите команды:\n#!/bin/bash\necho \"Привет, мир!\"\n\n4.  Сделайте файл исполняемым:\nchmod +x my_script.sh\n\n5.  Запустите скрипт:\n./my_script.sh\n\nШебанг (#!) указывает, какой интерпретатор использовать для выполнения команд. Обычно это /bin/bash.\n\nСоветы:\n•  Расширение .sh необязательно, но удобно для распознавания.\n•  Комментарии начинаются с #."
},
{
  "_id": {
    "$oid": "681a675ed6684927d8fa77ed"
  },
  "discipline": "DevOPS",
  "course": "Bash",
  "topic": "Функции и скрипты",
  "title": "Урок 2: Функции в Bash",
  "lesson": "Функции в Bash позволяют группировать команды и повторно их использовать.\n\nОбъявление функции:\ngreet() {\n  echo \"Привет, $1!\"\n}\n\nВызов функции:\ngreet \"Иван\"\n\nОсобенности:\n•  $1, $2, ... — позиционные аргументы;\n•  return может возвращать код (0–255), но не значение;\n•  echo используется для вывода результата.\n\nПример:\nsum() {\n  result=$(( $1 + $2 ))\n  echo $result\n}\nres=$(sum 2 3)\necho \"Сумма: $res\""
},
{
  "_id": {
    "$oid": "681a86bdd6684927d8fa77f3"
  },
  "discipline": "DevOPS",
  "course": "Сети и VPN",
  "topic": "Основы компьютерных сетей",
  "title": "Урок 1: Что такое сеть и как она устроена",
  "lesson": "Компьютерная сеть — это система, которая связывает два и более устройств для обмена данными. Примеры: домашние Wi-Fi-сети, корпоративные сети, Интернет.\n\nОсновные компоненты сети:\n•  Клиенты и серверы — устройства, которые получают и обрабатывают запросы;\n•  Сетевые устройства — роутеры, коммутаторы, точки доступа;\n•  Протоколы — правила обмена данными, например TCP/IP.\n\nТипы сетей:\n•  LAN (локальная сеть)\n•  WAN (глобальная сеть)\n•  MAN (городская сеть)"
},
{
  "_id": {
    "$oid": "681a8770d6684927d8fa77f5"
  },
  "discipline": "DevOPS",
  "course": "Сети и VPN",
  "topic": "Основы компьютерных сетей",
  "title": "Урок 2: Модель OSI и уровни передачи данных",
  "lesson": "Модель OSI — концептуальная модель, которая описывает, как данные проходят через сеть. Состоит из 7 уровней:\n1.  Физический (кабели, сигналы)\n2.  Канальный (MAC-адреса)\n3.  Сетевой (IP-адресация, маршрутизация)\n4.  Транспортный (TCP/UDP)\n5.  Сеансовый\n6.  Представления\n7.  Прикладной (HTTP, FTP, DNS)\n\nНа практике часто работают только с уровнями 2–4 и 7."
},
{
  "_id": {
    "$oid": "681a8864d6684927d8fa77f8"
  },
  "discipline": "DevOPS",
  "course": "Сети и VPN",
  "topic": "Инструменты и диагностика сети",
  "title": "Урок 1: Команды ping, traceroute, netstat",
  "lesson": "Эти команды используются для диагностики сетей:\n•  ping — проверка доступности узла.\n•  traceroute (или tracert в Windows) — маршрут до хоста.\n•  netstat — активные подключения и порты.\n\nПримеры:\nping google.com\ntraceroute 8.8.8.8\nnetstat -tuln"
},
{
  "_id": {
    "$oid": "681a88c0d6684927d8fa77fa"
  },
  "discipline": "DevOPS",
  "course": "Сети и VPN",
  "topic": "Инструменты и диагностика сети",
  "title": "Урок 2: Настройка IP и работа с ifconfig/ip",
  "lesson": "Интерфейсы сети настраиваются с помощью:\n•  ifconfig (устарела);\n•  ip — современная альтернатива.\n\nПримеры:\nip a       # показать интерфейсы\nip r       # таблица маршрутов\nip link set eth0 up/down\n\nВы можете задать IP вручную:\nip addr add 192.168.1.10/24 dev eth0"
},
{
  "_id": {
    "$oid": "681a8a28d6684927d8fa77fd"
  },
  "discipline": "DevOPS",
  "course": "Сети и VPN",
  "topic": "Основы VPN и настройка",
  "title": "Урок 1: Что такое VPN и зачем он нужен",
  "lesson": "VPN (Virtual Private Network) — это технология, позволяющая создать защищённое соединение между устройствами через интернет. VPN шифрует трафик и позволяет:\n•  Обеспечить конфиденциальность (ваш трафик не виден провайдеру);\n•  Получить удалённый доступ к корпоративной сети;\n•  Обойти блокировки и ограничения по геолокации;\n•  Обеспечить безопасную работу в публичных Wi-Fi-сетях.\n\nПринцип работы:\nVPN создаёт защищённый туннель между вашим устройством и VPN-сервером. Весь ваш трафик идёт через этот туннель в зашифрованном виде.\n\nПопулярные протоколы VPN:\n•  OpenVPN — надёжный и гибкий;\n•  WireGuard — быстрый и современный;\n•  IPSec — часто используется в корпоративной среде."
},
{
  "_id": {
    "$oid": "681a9695d6684927d8fa7803"
  },
  "discipline": "DevOPS",
  "course": "С 0 до Linux администратора",
  "topic": "Введение в Linux",
  "title": "Урок 1: Что такое Linux и зачем он нужен",
  "lesson": "Linux — это операционная система с открытым исходным кодом, построенная на ядре Linux, впервые представленном Линусом Торвальдсом в 1991 году. В отличие от Windows и macOS, Linux бесплатен, гибок, настраиваем, широко используется в серверах, дата-центрах, облаках, мобильных устройствах и встраиваемых системах.\n\nКлючевые особенности Linux:\n•  Открытый исходный код (Open Source) — любой может просматривать, изменять и распространять код.\n•  Безопасность и стабильность — широко применяется в банковском секторе, госструктурах и облаках.\n•  Мощная командная строка — позволяет тонко настраивать систему и автоматизировать задачи.\n•  Поддержка сообщества — тысячи разработчиков по всему миру."
},
{
  "_id": {
    "$oid": "681a9738d6684927d8fa7805"
  },
  "discipline": "DevOPS",
  "course": "С 0 до Linux администратора",
  "topic": "Введение в Linux",
  "title": "Урок 2: Дистрибутивы Linux: Ubuntu, CentOS, Debian и др.",
  "lesson": "Дистрибутив Linux — это сборка, которая включает ядро, системные утилиты, менеджер пакетов и интерфейс.\n\nПопулярные дистрибутивы:\n•  Ubuntu — удобный, с большим сообществом, подходит новичкам;\n•  Debian — стабильность, часто используется как основа для других дистрибутивов;\n•  CentOS (AlmaLinux/Rocky Linux) — серверный дистрибутив, ориентирован на стабильность;\n•  Fedora — содержит передовые технологии и быстро обновляется;\n•  Arch Linux — минимализм и гибкость, для опытных пользователей.\n\nСистемы управления пакетами:\n•  apt — Debian, Ubuntu;\n•  yum/dnf — CentOS, Fedora;\n•  pacman — Arch Linux."
},
{
  "_id": {
    "$oid": "681a9847d6684927d8fa7807"
  },
  "discipline": "DevOPS",
  "course": "С 0 до Linux администратора",
  "topic": "Введение в Linux",
  "title": "Урок 3: Установка Linux в виртуальной машине (VirtualBox/VMware)",
  "lesson": "Виртуальная машина (VM) — программная имитация физического компьютера, удобный способ изучать Linux, не затрагивая основную ОС.\n\nИнструменты:\n•  VirtualBox — бесплатная программа от Oracle;\n•  VMware Workstation Player — популярный коммерческий аналог.\n\nШаги установки:\n1.  Скачайте ISO-образ нужного дистрибутива (например, с ubuntu.com).\n2.  Создайте виртуальную машину, выберите ISO как установочный диск.\n3.  Установите систему (обычно через графический интерфейс).\n4.  Назначьте как минимум:\n  2 ГБ ОЗУ,\n  20 ГБ диска,\n  2 CPU (желательно).\n5.  После установки можно запускать систему в окне, как обычное приложение."
}]