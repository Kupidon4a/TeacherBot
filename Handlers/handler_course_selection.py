from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ContextTypes
)

from Data_Base.database import db
from Menu.teacher import teacher
from User.user import user

#–í—ã–±–æ—Ä –∫—É—Ä—Å–∞
async def handle_course_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "back_to_disciplines":
        await teacher(update, context)
        return
    
    try:
        if user.get_topic() != None or user.get_title() != None:
            print(f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫—É—Ä—Å - {user.get_course()}")
            print(f"–í—ã–±—Ä–∞–Ω–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ç–µ–º–∞ - {user.get_topic()}")
            print(f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —É—Ä–æ–∫ - {user.get_title()}")
            
            await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–µ –Ω–∞–∂–∏–º–∞–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–µ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç –±–æ—Ç–∞!")
            return
        course = query.data.replace("course_", "")
        course = context.user_data.get(query.data)
        
        user.set_course(course)
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.get_login()} –í—ã–±—Ä–∞–Ω –∫—É—Ä—Å {user.get_course()}")
        user.set_course(user.get_course())
        
        if not user.get_discipline():
            await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
            return
        
        topics = db.get_topics(user.discipline, user.course)

        if not topics:
            available_courses = db.get_courses(user.discipline)
            await query.message.reply_text(
                f" –í –∫—É—Ä—Å–µ '{user.get_course()}' –∏–∑ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã {user.get_discipline()} –Ω–µ—Ç —Ç–µ–º.\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã: {', '.join(available_courses)}"
            )
            return
        
        buttons = []
        for topic in topics:
            topic_id = str(abs(hash(topic)))[:8]
            buttons.append([InlineKeyboardButton(topic, callback_data=f"topic_{topic_id}")])
            context.user_data[f"topic_{topic_id}"] = topic
        
        buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_courses")])
        
        await query.message.reply_text(
            f"üìö –ö—É—Ä—Å: <b>{user.course}</b>\n–í—ã–±–µ—Ä–∏ —Ç–µ–º—É:",
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode="HTML"
        )
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_course_selection: {str(e)}")
        await query.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ–º")